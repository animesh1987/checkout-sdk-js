{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/utility/amount-transformer.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-declined-error.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","ShippingStrategyActionType","CheckoutActionType","standard_error_StandardError","StandardError","message","_newTarget","setPrototypeOf","__proto__","Error","captureStackTrace","stack","external_tslib_","CouponActionType","BillingAddressActionType","OrderActionType","PaymentMethodActionType","CheckoutButtonActionType","GiftCertificateActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","RequestError","response","_a","_b","errors","_c","ConfigActionType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","ContentType","PaymentActionType","InvalidArgumentError","HOSTED","OFFLINE","isIframeEvent","isEqual","objectA","objectB","options","Array","isArray","length","index","length_1","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","PaymentMethodInvalidError","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","post","event","window","postMessage","setTarget","CustomerActionType","ErrorActionType","PaymentMethodActionCreator","_requestSender","loadPaymentMethods","rxjs__WEBPACK_IMPORTED_MODULE_2__","observer","next","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","timeout","Accept","JsonV1","X-API-INTERNAL","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","forEach","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","data","_common_utility__WEBPACK_IMPORTED_MODULE_2__","CheckoutIncludes","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","result","concat","map","item","amountTransformer","amount_transformer","id","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","map_to_internal_line_item","mapToInternalLineItemType","INTERNAL_USE_ONLY","_is_equal__WEBPACK_IMPORTED_MODULE_0__","CacheKeyResolver","_lastId","_maps","getKey","args","_i","arguments","_resolveMap","apply","parentMaps","cacheKey","usedCount","_generateKey","slice","getUsedCount","isMatched","parentMaps_1","maps","bindDecorator","target","descriptor","bindMethodDecorator","decoratedTarget","class_1","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","method","boundMethod","set","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","mapToInternalLineItem","_common_utility__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","isPrivate","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","action","payload","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","ShippingNotInitialized","AmountTransformer","_decimalPlaces","Math","round","pow","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","test","anchor","document","createElement","href","hash","hostname","pathname","port","protocol","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","useCache","fn","resolver","instanceMethods","cache_key_resolver","external_lodash_","external_rxjs_","pipe","operators_","store","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","CheckoutActionCreator","_checkoutRequestSender","_configActionCreator","loadCheckout","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error__WEBPACK_IMPORTED_MODULE_4__","LoadCheckoutFailed","loadDefaultCheckout","context","getState","config","getContextConfig","checkoutId","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","updateCheckout","checkout","getCheckout","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","ConsignmentActionCreator","_consignmentRequestSender","unassignItemsByAddress","consignment","state","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","AvailablePreQuoteShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getConsignmentRequestBody","createConsignments","CreateConsignmentsRequested","console","log","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","lineItem","request","DEFAULT_PARAMS","join","ConsignmentRequestSender","put","delete","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","request_error","joinErrors","map_from_payment_error_response_joinErrors","RequestErrorFactory","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","timeout_error","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","error_actions","ClearError","isClearErrorAction","omit_deep","DEFAULT_STATE","statuses","billingAddressReducer","data_store_","dataReducer","errorsReducer","statusesReducer","reducer","billing_address_actions","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","billingAddress","loadError","UpdateBillingAddressRequested","updateError","UpdateBillingAddressFailed","ContinueAsGuestRequested","continueAsGuestError","ContinueAsGuestFailed","isLoading","isUpdating","isContinuingAsGuest","cart_reducer_DEFAULT_STATE","cartReducer","cart_reducer_dataReducer","cart_reducer_errorsReducer","cart_reducer_statusesReducer","consignment_actions","coupon_actions","ApplyCouponSucceeded","RemoveCouponSucceeded","gift_certificate_actions","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","checkout_button_reducer_DEFAULT_STATE","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","checkout_button_reducer_dataReducer","checkout_button_reducer_errorsReducer","checkout_button_reducer_statusesReducer","checkout_button_actions","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","initializeError","InitializeButtonFailed","DeinitializeButtonRequested","deinitializeError","DeinitializeButtonFailed","isInitializing","isDeinitializing","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","coupon_reducer_DEFAULT_STATE","couponReducer","coupon_reducer_dataReducer","coupon_reducer_errorsReducer","coupon_reducer_statusesReducer","coupons","ApplyCouponRequested","applyCouponError","ApplyCouponFailed","RemoveCouponRequested","removeCouponError","RemoveCouponFailed","isApplyingCoupon","isRemovingCoupon","gift_certificate_reducer_DEFAULT_STATE","giftCertificateReducer","gift_certificate_reducer_dataReducer","gift_certificate_reducer_errorsReducer","gift_certificate_reducer_statusesReducer","giftCertificates","ApplyGiftCertificateRequested","applyGiftCertificateError","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","removeGiftCertificateError","RemoveGiftCertificateFailed","isApplyingGiftCertificate","isRemovingGiftCertificate","customer_reducer_DEFAULT_STATE","customerReducer","customer_reducer_dataReducer","customer","customer_strategy_state_DEFAULT_STATE","customerStrategyReducer","customer_strategy_reducer_dataReducer","customer_strategy_reducer_errorsReducer","customer_strategy_reducer_statusesReducer","customer_strategy_actions","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isSigningIn","isSigningOut","isWidgetInteracting","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","country_actions","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","order_reducer_DEFAULT_STATE","orderReducer","order_reducer_dataReducer","order_reducer_errorsReducer","metaReducer","order_reducer_statusesReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","payment_reducer_dataReducer","payment_actions","SubmitPaymentSucceeded","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","payment_method_reducer_metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","gateway","newArray","loadMethodId","loadMethodError","isLoadingMethod","payment_strategy_state_DEFAULT_STATE","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","payment_strategy_actions","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","instrument_actions","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","instrument","bigpayToken","instrumentId","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","settings","UpdateRemoteCheckout","consignment_reducer_DEFAULT_STATE","updateShippingOptionError","isUpdatingShippingOption","consignmentReducer","consignment_reducer_dataReducer","consignment_reducer_errorsReducer","consignment_reducer_statusesReducer","customer_actions","SignOutCustomerSucceeded","isLoadingShippingOptions","isCreating","shipping_country_reducer_DEFAULT_STATE","shippingCountryReducer","shipping_country_reducer_dataReducer","shipping_country_reducer_errorsReducer","shipping_country_reducer_statusesReducer","shipping_country_actions","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shipping_strategy_state_DEFAULT_STATE","shippingStrategyReducer","shipping_strategy_reducer_dataReducer","shipping_strategy_reducer_errorsReducer","shipping_strategy_reducer_statusesReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","checkout_reducer_DEFAULT_STATE","checkoutReducer","checkout_reducer_dataReducer","checkout_reducer_errorsReducer","checkout_reducer_statusesReducer","orderId","billing_address_selector","BillingAddressSelector","_billingAddress","getBillingAddress","getUpdateError","getContinueAsGuestError","getLoadError","selector_decorator","cart_selector","CartSelector","_cart","checkout_button_selector","CheckoutButtonSelector","_checkoutButton","getInitializeError","getDeinitializeError","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","config_selector","ConfigSelector","_config","getConfig","getStoreConfig","storeConfig","getExternalSource","externalSource","coupon_selector","CouponSelector","_coupon","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","gift_certificate_selector","GiftCertificateSelector","_giftCertificate","getGiftCertificates","customer_selector","CustomerSelector","_customer","getCustomer","CustomerStrategySelector","_customerStrategies","getSignInError","getSignOutError","getWidgetInteractionError","form_selector","FormSelector","getShippingAddressFields","countries","countryCode","selectedCountry","formFields","shippingAddressFields","field","_processField","getBillingAddressFields","billingAddressFields","_processCountry","_processProvince","_processsPostCode","country","items","label","fieldType","itemtype","subdivisions","required","hasPostalCodes","Boolean","country_selector","CountrySelector","_countries","getCountries","order_selector","OrderSelector","_order","_coupons","getOrder","getOrderMeta","payment_selector","PaymentSelector","_checkout","getPaymentId","internalPayment","_getInternalPayment","providerId","gatewayId","_getHostedPayment","_getGatewayPayment","getPaymentStatus","replace","step","getPaymentToken","getPaymentRedirectUrl","redirectUrl","isPaymentDataRequired","useStoreCredit","grandTotal","getGrandTotal","isPaymentDataSubmitted","paymentMethod","nonce","payment_status_types","payments","providerType","payment_method_types","payment_method_selector","PaymentMethodSelector","_paymentMethods","getPaymentMethods","getPaymentMethodsMeta","getPaymentMethod","getLoadMethodError","payment_strategy_selector","PaymentStrategySelector","_paymentStrategies","getExecuteError","getFinalizeError","getWidgetInteractingError","InstrumentSelector","_instruments","getInstruments","getInstrumentsMeta","getDeleteError","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","shipping_address_selector","ShippingAddressSelector","_consignments","getShippingAddress","shipping_country_selector","ShippingCountrySelector","_shippingCountries","getShippingCountries","shipping_strategy_selector","ShippingStrategySelector","_shippingStrategies","getUpdateAddressError","getSelectOptionError","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","consignment_selector","ConsignmentSelector","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","getUpdateShippingOptionError","isAssigningItems","checkout_selector","CheckoutSelector","_giftCertificates","storeCredit","max","createInternalCheckoutSelectors","checkoutButton","customerStrategies","customer_strategy_selector","form","instruments","instrument_selector","paymentMethods","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","request_error_factory","unrecoverable_error","payment_method_invalid_error","action$","every","stateTransformer","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","mapToInternalCoupon","couponTypes","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","checkout_button_error_selector","CheckoutButtonErrorSelector","getInitializeButtonError","getDeinitializeButtonError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","CheckoutButtonMethodType","CheckoutButtonInitializer","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","invalid_argument_error","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonStrategyActionCreator","_registry","_paymentMethodActionCreator","throw_error_action","checkout_button_method_type","BraintreePaypalButtonStrategy","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","missing_data_error","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","not_initialized_error","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","postForm","payment_type","provider","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","Content-Type","bind_decorator","masterpass_button_strategy","MasterpassButtonStrategy","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","get_callback_url","PaypalButtonStrategy","_host","merchantId","clientId","actions","internal_api_headers","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","create_checkout_store","requestSender","request_sender_","formPoster","form_poster_","checkout_button_initializer","checkout_button_strategy_action_creator","registry","registry_registry","scriptLoader","script_loader_","checkoutActionCreator","checkout_action_creator","checkout_request_sender","config_action_creator","config_request_sender","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","braintree_sdk_creator","braintree_script_loader","paypal_script_loader","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_script_loader","GOOGLEPAY_BRAINTREE","create_googlepay_payment_processor","googlepay_braintree_initializer","GOOGLEPAY_STRIPE","googlepay_stripe_initializer","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","payment_method_action_creator","payment_method_request_sender","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","a","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","NotEmbeddableError","UnknownError","standard_error","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","reject","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","STORAGE_PREFIX","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","TimeoutError","selectorDecorator","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","selectorMethodDecorator","joinIncludes","includes","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","continueAsGuest","credentials","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","customerId","fullName","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_coupon__WEBPACK_IMPORTED_MODULE_3__","orderMeta","customerCanBeCreated","mapToInteralOrderPayment","subtotal","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","PaypalScriptLoader","ErrorActionCreator","clearError","getEnvironment","process","NODE_ENV","e","ConsoleLogger","_console","messages","_logToConsole","info","warn","debug","NoopLogger","isEnabled","logger","console_logger","noop_logger","getDefaultLogger","CouponActionCreator","_couponRequestSender","applyCoupon","removeCoupon","CouponRequestSender","couponCode","checkout_params","GiftCertificateActionCreator","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","GiftCertificateRequestSender","giftCertificateCode","CustomerStrategyActionCreator","_strategyRegistry","signIn","signOut","widgetInteraction","AmazonPayScriptLoader","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","to_form_url_encoded","card_information","_getCardInformation","_getAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","braintree_visacheckout_payment_processor","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","JPMC","RemoteCheckoutRequestSender","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","RemoteCheckoutActionCreator","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","CustomerActionCreator","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutActionCreator","amazonOptions","not_implemented_error","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","BraintreeVisaCheckoutCustomerStrategy","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","visaCheckoutOptions","braintreevisacheckout","initOptions","storeProfile","storeLanguage","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","_chasePayScriptLoader","chasePayOptions","chasepay","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","CountryActionCreator","_countryRequestSender","loadCountries","CountryRequestSender","Accept-Language","OrderRequestSender","loadOrder","submitOrder","finalizeOrder","OrderActionCreator","_orderRequestSender","_checkoutValidator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","PaymentStrategyType","OrderFinalizationNotRequiredError","payment_strategy_type","PaymentStrategyActionCreator","_orderActionCreator","execute","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","order_finalization_not_required_error","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","CartChangedError","CheckoutValidator","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","isVaultedInstrument","PaymentActionCreator","_paymentRequestSender","submitPayment","SubmitPaymentRequested","_getPaymentRequestBody","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","map_to_internal_customer","authToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","geoCountryCode","source","paymentMethodSelector","PaymentRequestSender","_transformResponse","statusText","PaymentStrategyRegistry","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","paymentSettings","PaymentArgumentInvalidError","invalidFields","PaymentMethodCancelledError","AffirmPaymentStrategy","_paymentActionCreator","_affirmScriptLoader","publicKey","affirm","_affirm","payment_argument_invalid_error","_getCheckoutInformation","open","onFail","failObject","reason","payment_method_cancelled_error","onSuccess","successObject","ui","paymentPayload","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","_d","_e","customItems","_f","_g","listPrice","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","affirmJs","Function","AffirmScriptLoader","apikey","scriptURI","_getScriptURI","AfterpayPaymentStrategy","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","afterpaySdk","_afterpaySdk","_displayModal","afterpay","orderPayload","countryName","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","AfterPay","isInternalAddressEqual","ignoredKeys","is_private","mapFromInternalAddress","AmazonPayPaymentStrategy","_billingAddressActionCreator","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","_getMerchantId","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","Overlay","_element","_createElement","parentElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","onClick_1","handeTransition","propertyName","promise","cancellable","cancel","race","BraintreePaymentProcessor","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","cancellable_promise","appendSessionId","processedPayment","creditCard","cardholderName","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","_is3dsEnabled","is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","shouldSaveInstrument","tokenizedCard","ChasePayEventType","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","BraintreeVisaCheckoutPaymentStrategy","_paymentStrategyActionCreator","visaInitOptions","CardBrand","DigitalWalletType","chasepay_payment_strategy","ChasePayPaymentStrategy","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","ConvergePaymentStrategy","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","CreditCardPaymentStrategy","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayOptions","statusCode","KlarnaPaymentStrategy","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","client_token","show_form","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","setup","environment","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","SagePayPaymentStrategy","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","PaymentMethodDeclinedError","ZipPaymentStrategy","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","payment_method_declined_error","onCheckout","openModal","ZipScriptLoader","Zip","createPaymentStrategyRegistry","paymentClient","payment_strategy_registry","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","paymentStrategyActionCreator","payment_strategy_action_creator","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","WE_PAY","wepay_payment_strategy","STRIPE_GOOGLE_PAY","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","now","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","shopperCurrency","isTransactional","InstrumentResponseTransformer","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","defaultInstrument","default_instrument","iin","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","selectOption","mergedOptions","AmazonPayShippingStrategy","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","checkout_store_selector","CheckoutStoreSelector","_form","_payment","_shippingAddress","getShippingOptions","availableShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","checkout_store_error_selector","CheckoutStoreErrorSelector","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getSelectShippingOptionError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getUpdateCheckoutError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isSelectingShippingOption","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isUpdatingCheckout","createCheckoutSelectors","ErrorMessageTransformer","_messageCustomizer","input","trim","CheckoutService","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_errorTransformer","error_message_transformer","isCheckoutServiceError","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","createCheckoutService","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","createCustomerStrategyRegistry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","createShippingStrategyRegistry","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","currency_service","create_checkout_button_initializer","embed_checkout","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","mapToInternalCart","promotions","notifications","map_to_internal_line_items","map_to_internal_coupon","promotion","banners","banner","placeholders","messageHtml","certificate","map_to_internal_gift_certificate","isShippingRequired","taxSubtotal"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 137);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any; };\n    errors: Array<{ code: string, message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string, message?: string }>,\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","module.exports = require(\"@bigcommerce/script-loader\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    AvailablePreQuoteShippingOptions = 'consignments.availablePreQuoteShippingOptions',\n    PreQuoteShippingOptionValues = 'consignments.preQuoteShippingOptionValues',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","module.exports = require(\"iframe-resizer\");","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [\n                        CheckoutIncludes.AvailableShippingOptions,\n                        CheckoutIncludes.AvailablePreQuoteShippingOptions,\n                    ],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    console.log('adcahaha', body);\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'consignments.availablePreQuoteShippingOptions',\n        'consignments.preQuoteShippingOptionValues',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        console.log('test');\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string, message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return {\n            ...data,\n            initializedContainers: {\n                ...data.initializedContainers,\n                [action.meta.containerId]: true,\n            },\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...data,\n            initializedContainers: {},\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean {\n        const method = this._checkoutButton.data[methodId];\n\n        if (!method) {\n            return false;\n        }\n\n        if (!containerId) {\n            return some(method.initializedContainers, isInitialized => isInitialized === true);\n        }\n\n        return method.initializedContainers[containerId] === true;\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): RequestError | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): RequestError | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._customerStrategies.data[methodId] &&\n            this._customerStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const grandTotal = this._checkout.getGrandTotal(useStoreCredit);\n\n        return grandTotal ? grandTotal > 0 : false;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._paymentStrategies.data[methodId] &&\n            this._paymentStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._shippingStrategies.data[methodId] &&\n            this._shippingStrategies.data[methodId].isInitialized\n        );\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getGrandTotal(useStoreCredit?: boolean): number | undefined {\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : grandTotal;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../../payment/strategies/paypal';\nimport { PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.type = 'timeout';\n    }\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError} from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._getPaymentRequestBody({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(state.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { StandardError } from '../../../common/error/errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n        if (!this._window.affirm) {\n            throw new StandardError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new StandardError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getGrandTotal(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.type = 'payment_declined';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _zipScriptLoader: ZipScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._zipScriptLoader.load()\n            .then(zip => {\n                this._zipClient = zip;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n        const useStoreCredit = !!payload.useStoreCredit;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(payment.methodId, { useStoreCredit })\n            ))\n            .then(()  => {\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options))\n                    .then(state => {\n                        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n                        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                        }\n                    })\n                    .then(() => new Promise<string>((resolve, reject) => {\n                        zipClient.Checkout.init({\n                            onComplete: ({ checkoutId, state }) => {\n                                if (state === ZipModalEvent.CancelCheckout) {\n                                    return reject(new PaymentMethodCancelledError());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                                    return resolve(checkoutId);\n                                }\n\n                                if (state === ZipModalEvent.CheckoutDeclined) {\n                                    return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                                }\n\n                                reject(new PaymentMethodInvalidError());\n                            },\n                            onCheckout: openModal => {\n                                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                openModal(JSON.parse(this._paymentMethod.clientToken));\n                            },\n                        });\n                    })\n                    .then(nonce =>\n                        this._store.dispatch(this._paymentActionCreator.submitPayment({\n                            methodId: payment.methodId,\n                            paymentData: { nonce },\n                        }))\n                    ));\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new StandardError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const paymentActionCreator = new PaymentActionCreator(new PaymentRequestSender(paymentClient), orderActionCreator);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ZipScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\n\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddress, BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\nconsole.log('sdk-changed2');\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n"],"sourceRoot":""}